package org.example;
import com.google.gson.Gson;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Map;

public class GUI {

    public static void main(String[] args) {
        DataBaseController.createTable();

        JFrame frame = new JFrame("GUI");
        frame.setContentPane(new GUI().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private JPanel panel1;
    private JTextArea waluty;
    private JTextArea wyniki;
    private JButton zaczytane_waluty;
    private JTextField nazwa_waluty;
    private JButton wyszukaj;
    private JButton Wykres;

    public GUI() {
        zaczytane_waluty.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    DataBaseController.clearTable();

                    // Pobranie i deserializacja danych z API
                    String apiUrl = "https://openexchangerates.org/api/latest.json?app_id=facffc6984e348ce9569adc7c1ddaa7c";
                    HttpClient client = HttpClient.newHttpClient();

                    HttpRequest request = HttpRequest.newBuilder()
                            .uri(URI.create(apiUrl))
                            .build();

                    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                    Deserialized deserialized = deserializeJson(response.body());

                    // Zapisanie danych do bazy
                    saveToDatabase(deserialized);

                    // Pobranie danych z bazy
                    List<info_walut> results = DataBaseController.getWyniki();
                    StringBuilder wynik = new StringBuilder();
                    for (info_walut walut : results) {
                        wynik.append(walut.getWalutaDb()).append(": ").append(walut.getWartoscDb()).append("\n");
                    }

                    // Wyświetlenie danych w JTextArea
                    waluty.setText(wynik.toString());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "An error occurred while fetching the data.");
                }
            }
        });

        // Wyszukiwanie waluty
        wyszukaj.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String nazwa = nazwa_waluty.getText();
                    List<info_walut> results = DataBaseController.getWaluty(nazwa);
                    StringBuilder wynik = new StringBuilder();
                    for (info_walut walut : results) {
                        wynik.append(walut.getWalutaDb()).append(": ").append(walut.getWartoscDb()).append("\n");
                    }
                    wyniki.setText(wynik.toString());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "An error occurred while fetching the data.");
                }
            }
        });

        // Wyświetlenie wykresu
        Wykres.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    List<info_walut> results = DataBaseController.getWyniki();
                    ChartDisplay.displayChart(results);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "An error occurred while generating the chart.");
                }
            }
        });
    }

    // Deserializacja JSON
    private static Deserialized deserializeJson(String responseBody) {
        Gson gson = new Gson();
        return gson.fromJson(responseBody, Deserialized.class);
    }

    // Zapisanie danych do bazy
    private static void saveToDatabase(Deserialized deserialized) {
        DataBaseController.createTable(); // Ensure the table exists

        for (Map.Entry<String, Float> entry : deserialized.getRates().entrySet()) {
            info_walut info = new info_walut();
            info.setWalutaDb(entry.getKey());
            info.setWartoscDb(entry.getValue());

            DataBaseController.saveInfoWalut(info);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        waluty = new JTextArea();
        scrollPane1.setViewportView(waluty);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel1.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        wyniki = new JTextArea();
        scrollPane2.setViewportView(wyniki);
        zaczytane_waluty = new JButton();
        zaczytane_waluty.setText("Zaczytanie danych");
        panel1.add(zaczytane_waluty, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nazwa_waluty = new JTextField();
        panel1.add(nazwa_waluty, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        wyszukaj = new JButton();
        wyszukaj.setText("Szukaj");
        panel1.add(wyszukaj, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Wykres = new JButton();
        Wykres.setText("Wykres");
        panel1.add(Wykres, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
